#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import json
import requests
import phonenumbers
import whois
import socket
import re
import time
from bs4 import BeautifulSoup
from urllib.parse import urlencode, quote
from datetime import datetime

class MegaOSINTTool:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36'
        })
        
        # –ú–ï–ì–ê –ë–ê–ó–ê –î–ê–ù–ù–´–• - –≤—Å–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        self.mega_databases = {
            # üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã
            '–§–ù–° –ò–ù–ù —Ñ–∏–∑–ª–∏—Ü–∞': 'https://service.nalog.ru/inn.do',
            '–†–µ–µ—Å—Ç—Ä –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤': 'https://bankrot.fedresurs.ru/',
            '–ï–ì–†–Æ–õ': 'https://egrul.nalog.ru/',
            '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è': 'https://xn--90adear.xn--p1ai/check/driver/',
            '–°—á–µ—Ç–Ω–∞—è –ø–∞–ª–∞—Ç–∞': 'https://results.audit.gov.ru/',
            '–°—É–¥–µ–±–Ω—ã–µ –∞–∫—Ç—ã': 'https://sudact.ru/',
            '–¶–ë –†–§ –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏': 'https://www.cbr.ru/credit/main.asp',
            '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—á–µ—Ç–æ–≤': 'https://service.nalog.ru/bi.do',
            '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –§–ú–°': 'https://services.fms.gov.ru/',
            '–ù–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏': 'https://zakupki.gov.ru/223/dishonest/public/supplier-search.html',
            '–†–µ–µ—Å—Ç—Ä —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–æ–≤': 'https://fedsfm.ru/documents/terrorists-catalog-portal-act',
            '–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π': 'https://www.stroi-baza.ru/forum/index.php?showforum=46',
            '–†–µ—à–µ–Ω–∏—è —Å—É–¥–æ–≤': 'https://xn--90afdbaav0bd1afy6eub5d.xn--p1ai/',
            '–¶–µ–Ω—Ç—Ä –¥–æ–ª–≥–æ–≤': 'https://www.centerdolgov.ru/',
            '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å—É–¥': 'https://ras.arbitr.ru/',
            '–†–æ—Å—Ä–µ–µ—Å—Ç—Ä': 'https://rosreestr.ru/wps/portal/cc_information_online',
            '–ë–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π': 'https://www.voditeli.ru/',
            '–°—É–¥—ã –æ–±—â–µ–π —é—Ä–∏—Å–¥–∏–∫—Ü–∏–∏': 'https://www.gcourts.ru/',
            '–†–∞—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏': 'https://www.e-disclosure.ru/',
            '–§–°–°–ü': 'https://www.fssprus.ru/',
            '–§–ê–° –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏': 'https://rnp.fas.gov.ru/',
            '–£—Å–ª—É–≥–∏ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–∞': 'https://rosreestr.ru/wps/portal/p/cc_present/EGRN_1',
            '–ù–æ—Ç–∞—Ä–∏—É—Å—ã': 'https://www.notary.ru/notary/bd.html',
            '–ß–û–ü': 'https://allchop.ru/',
            '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–æ–≤': 'https://enotpoiskun.ru/tools/codedecode/',
            '–ü—Ä–æ–≤–µ—Ä–∫–∞ –û–°–ê–ì–û': 'https://polis.autoins.ru/',
            '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ VIN': 'https://www.vinformer.su/ident/vin.php?setLng=ru',
            '–§–°–°–ü –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞': 'https://fssprus.ru/iss/ip',
            '–§–°–°–ü —Ä–æ–∑—ã—Å–∫': 'https://fssprus.ru/iss/ip_search',
            '–†–æ–∑—ã—Å–∫ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤': 'https://fssprus.ru/iss/suspect_info',
            '–†–µ–µ—Å—Ç—Ä –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤': 'https://fssprus.ru/gosreestr_jurlic/',
            '–û—Ç–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –§–°–°–ü': 'https://opendata.fssprus.ru/',
            '–°–∞–º–æ—Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏': 'https://sro.gosnadzor.ru/',
            '–†–µ–µ—Å—Ç—Ä –∑–∞–ª–æ–≥–æ–≤': 'https://www.reestr-zalogov.ru/search/index',
            '–†–æ–∑—ã—Å–∫ –ú–í–î': 'https://–º–≤–¥.—Ä—Ñ/wanted',
            '–†–µ–µ—Å—Ç—Ä —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ú–æ—Å–∫–≤—ã': 'https://www.mos.ru/karta-moskvicha/services-proverka-grazhdanina-v-reestre-studentov/',
            '–§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ': 'https://esugi.rosim.ru',
            '–†–µ–µ—Å—Ç—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–µ—Ä—Å–¥–∞–Ω–Ω—ã—Ö': 'https://pd.rkn.gov.ru/operators-registry',
            
            # üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
            '–§–ù–° –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å': 'https://service.nalog.ru/zd.do',
            '–§–ù–° –∞–¥—Ä–µ—Å–∞ —é—Ä–ª–∏—Ü': 'https://service.nalog.ru/addrfind.do',
            '–§–ù–° –≥–æ—Å—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è': 'https://service.nalog.ru/uwsfind.do',
            '–§–ù–° –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ': 'https://service.nalog.ru/disqualified.do',
            '–§–ù–° –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏': 'https://service.nalog.ru/disfind.do',
            '–§–ù–° –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞': 'https://service.nalog.ru/svl.do',
            '–§–ù–° —É—á—Ä–µ–¥–∏—Ç–µ–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —é—Ä–ª–∏—Ü': 'https://service.nalog.ru/mru.do',
            '–§–µ–¥—Ä–µ—Å—É—Ä—Å': 'https://fedresurs.ru/',
            
            # üåê –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ OSINT –±–∞–∑—ã
            'Namechk (username)': 'https://namechk.com/',
            'HaveIBeenPwned (email)': 'https://haveibeenpwned.com/',
            'Hacked-Emails': 'https://hacked-emails.com/',
            'GhostProject': 'https://ghostproject.fr/',
            'WeLeakInfo': 'https://weleakinfo.com/',
            'Pipl': 'https://pipl.com/',
            'LeakedSource': 'https://leakedsource.ru/',
            'PhoneNumber': 'https://phonenumber.to',
            'OSINT Framework': 'https://osintframework.com/',
            'FindClone': 'https://findclone.ru/',
            'UnwiredLabs (–±–∞–∑–æ–≤—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏)': 'https://unwiredlabs.com',
            'Xinit –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏': 'https://xinit.ru/bs/',
            'PhotoMap –ø–æ –≥–µ–æ–º–µ—Ç–∫–∞–º': 'https://sanstv.ru/photomap',
            
            # üö¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            'MarineTraffic': 'https://www.marinetraffic.com',
            'SeaTracker': 'https://seatracker.ru/ais.php',
            'ShipFinder': 'https://shipfinder.co/',
            'PlaneFinder': 'https://planefinder.net/',
            'RadarBox': 'https://www.radarbox24.com/',
            'FlightAware': 'https://de.flightaware.com/',
            'FlightRadar24': 'https://www.flightradar24.com',
            
            # üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–±–∞–∑—ã
            '–†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä —Ä–µ–µ—Å—Ç—Ä—ã': 'https://rkn.gov.ru/mass-communications/reestr/',
            '–ï–ì–†–Æ–õ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π': 'https://www.egrul.ru/',
            '–°–ö–†–ò–ù —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏': 'https://disclosure.skrin.ru',
            '–ü—Ä–∞–π–º-–¢–ê–°–°': 'https://1prime.ru/docs/product/disclosure.html',
            '–¶–ë –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏': 'https://www.cbr.ru/',
            '–†–æ—Å—Å—Ç–∞—Ç –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å': 'https://www.gks.ru/accounting_report',
            '–¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ –±–∞–∑—ã': 'https://www.tks.ru/db/',
            '–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π': 'https://tipodop.ru/',
            'CatalogFactory': 'https://www.catalogfactory.org/',
            '–ü—Ä–∞–≤–æ.—Ä—É': 'https://pravo.ru/',
            'AzStatus': 'https://azstatus.ru/',
            'Seldon –∑–∞–∫—É–ø–∫–∏': 'https://seldon.ru/',
            '–¢–ü–ü –Ω–∞–¥–µ–∂–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã': 'https://www.reestrtpprf.ru/',
            '–ö—Ä–æ–Ω–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∞': 'https://croinform.ru/index.php?page=index',
            '–ì–æ—Å–∑–∞–∫—É–ø–∫–∏': 'https://www.zakupki.gov.ru/epz/main/public/home.html',
            'Rostender': 'https://rostender.info/',
            '–ü—Ä–∞–≤–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è': 'https://pravo.fso.gov.ru/',
            'BicoTender': 'https://www.bicotender.ru/',
            '–í–®–≠ –∞—Ä—Ö–∏–≤': 'https://sophist.hse.ru/',
            'TenderGuru': 'https://www.tenderguru.ru/',
            'MoscowBase': 'https://www.moscowbase.ru/',
            'Credinform –ì–õ–û–ë–ê–°': 'https://www.credinform.ru/ru-RU/globas',
            'ActInfo —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫': 'https://www.actinfo.ru/',
            '–ü—Ä–∞–≤–æ—Å—É–¥–∏–µ': 'https://www.sudrf.ru/',
            '–ü—Ä–∞–≤–æ.—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç—ã': 'https://docs.pravo.ru/',
            'Fedresurs —Ñ–∞–∫—Ç—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏': 'https://www.fedresurs.ru/',
            'FindSMI –°–ú–ò': 'https://www.findsmi.ru/',
            'OpenGovData': 'https://hub.opengovdata.ru/',
            'Ruward —Ä–µ–π—Ç–∏–Ω–≥–∏': 'https://www.ruward.ru/',
            'B2B-Energo': 'https://www.b2b-energo.ru/firm_dossier/',
            'OpenData': 'https://opengovdata.ru/',
            '–ë–∏—Ä-–∞–Ω–∞–ª–∏—Ç–∏–∫': 'https://bir.1prime.ru/',
            'Prima-Inform': 'https://www.prima-inform.ru/',
            'Integrum': 'https://www.integrum.ru/',
            'Spark-Interfax': 'https://www.spark-interfax.ru/',
            'Fira': 'https://fira.ru/',
            'SKRIN': 'https://www.skrin.ru/',
            'Magelan —Ç–µ–Ω–¥–µ—Ä—ã': 'https://www.magelan.pro/',
            '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç': 'https://www.kontragent.info/',
            'IST-Budget': 'https://www.ist-budget.ru/',
            'Vuve': 'https://www.vuve.su/',
            'Disclosure': 'https://www.disclosure.ru/index.shtml',
            'Mosstat': 'https://www.mosstat.ru/index.html',
            'Torg94': 'https://www.torg94.ru/',
            'K-Agent': 'https://www.k-agent.ru/',
            'IS-Zakupki': 'https://www.is-zakupki.ru/',
            'SaleSpring': 'https://salespring.ru/',
            'Multistat': 'https://www.multistat.ru/'
        }

    def search_database(self, db_name, query, query_type):
        """–ü–æ–∏—Å–∫ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        results = {'database': db_name, 'query': query, 'type': query_type}
        
        if db_name in self.mega_databases:
            base_url = self.mega_databases[db_name]
            try:
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
                params = {}
                
                if query_type == 'inn':
                    params = {'inn': query}
                elif query_type == 'phone':
                    params = {'phone': query, 'number': query}
                elif query_type == 'email':
                    params = {'email': query, 'q': query}
                elif query_type == 'username':
                    params = {'username': query, 'q': query}
                elif query_type == 'company':
                    params = {'company': query, 'q': query, 'name': query}
                elif query_type == 'person':
                    params = {'fio': query, 'name': query, 'q': query}
                else:
                    params = {'q': query, 'search': query}
                
                response = self.session.get(base_url, params=params, timeout=20)
                results['status'] = response.status_code
                results['url'] = response.url
                
                if response.status_code == 200:
                    if 'text/html' in response.headers.get('content-type', ''):
                        soup = BeautifulSoup(response.text, 'html.parser')
                        results['title'] = soup.title.string if soup.title else None
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        text_content = soup.get_text()
                        results['content_preview'] = ' '.join(text_content[:300].split()) + '...'
                        
                    results['success'] = True
                else:
                    results['error'] = f"HTTP {response.status_code}"
                    
            except Exception as e:
                results['error'] = str(e)
        else:
            results['error'] = "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        return results

    def mass_search(self, query, query_type, selected_dbs=None):
        """–ú–∞—Å—Å–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüîç –ü–æ–∏—Å–∫ '{query}' ({query_type}) –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
        print("=" * 70)
        
        all_results = {}
        
        databases_to_search = selected_dbs if selected_dbs else self.mega_databases.keys()
        
        for db_name in databases_to_search:
            print(f"üìä {db_name}...")
            result = self.search_database(db_name, query, query_type)
            
            if 'error' not in result or result.get('success'):
                all_results[db_name] = result
                status = "‚úÖ" if result.get('success') else "‚ö†Ô∏è"
                print(f"   {status} {result.get('status', 'N/A')} - {result.get('url', '')}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown')}")
            
            time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        return all_results

    def auto_detect_query_type(self, query):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        query = str(query).strip()
        
        # –ò–ù–ù (10-12 —Ü–∏—Ñ—Ä)
        if re.match(r'^\d{10,12}$', query):
            return 'inn', '–ò–ù–ù'
        
        # –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞ (—Å–µ—Ä–∏—è –Ω–æ–º–µ—Ä)
        elif re.match(r'^\d{2} ?\d{2} ?\d{6}$', query):
            return 'driver_license', '–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ'
        
        # –ü–∞—Å–ø–æ—Ä—Ç (—Å–µ—Ä–∏—è –Ω–æ–º–µ—Ä)
        elif re.match(r'^\d{4} ?\d{6}$', query):
            return 'passport', '–ü–∞—Å–ø–æ—Ä—Ç'
        
        # Email
        elif '@' in query and re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', query):
            return 'email', 'Email'
        
        # –¢–µ–ª–µ—Ñ–æ–Ω
        elif re.match(r'^\+?[78]?[ -]?\(?\d{3}\)?[ -]?\d{3}[ -]?\d{2}[ -]?\d{2}$', query.replace(' ', '')):
            return 'phone', '–¢–µ–ª–µ—Ñ–æ–Ω'
        
        # Username (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
        elif re.match(r'^[a-zA-Z0-9._-]+$', query) and len(query) > 2:
            return 'username', 'Username'
        
        # –ö–æ–º–ø–∞–Ω–∏—è (—Å–æ–¥–µ—Ä–∂–∏—Ç –û–û–û, –ê–û, –ò–ü –∏ —Ç.–¥.)
        elif re.search(r'(–û–û–û|–ê–û|–ó–ê–û|–û–ê–û|–ò–ü|–ü–ê–û|–ù–ö–û)', query, re.IGNORECASE):
            return 'company', '–ö–æ–º–ø–∞–Ω–∏—è'
        
        # –§–ò–û (2-3 —Å–ª–æ–≤–∞, –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è)
        elif len(query.split()) in [2, 3] and all(word[0].isupper() for word in query.split() if word):
            return 'person', '–§–ò–û'
        
        else:
            return 'general', '–û–±—â–∏–π –∑–∞–ø—Ä–æ—Å'

    def comprehensive_search(self, query, db_category=None):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –±–∞–∑–∞–º"""
        query_type, type_name = self.auto_detect_query_type(query)
        print(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∏–ø: {type_name}")
        
        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–∞–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞
        if db_category == 'russian':
            dbs_to_search = [k for k in self.mega_databases.keys() if any(x in k for x in ['–§–ù–°', '–†–æ—Å', '–°—É–¥', '–ú–í–î', '–§–°–°–ü'])]
        elif db_category == 'international':
            dbs_to_search = [k for k in self.mega_databases.keys() if k not in ['–§–ù–°', '–†–æ—Å', '–°—É–¥', '–ú–í–î', '–§–°–°–ü']]
        else:
            dbs_to_search = None
        
        results = self.mass_search(query, query_type, dbs_to_search)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"mega_osint_search_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump({
                'query': query,
                'query_type': query_type,
                'type_name': type_name,
                'timestamp': timestamp,
                'results': results
            }, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
        
        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        success_count = sum(1 for r in results.values() if r.get('success'))
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {success_count}/{len(results)} –±–∞–∑ –æ—Ç–≤–µ—Ç–∏–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        return results

    def show_categories(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        categories = {
            'üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –≥–æ—Å. —Ä–µ–µ—Å—Ç—Ä—ã': [k for k in self.mega_databases if any(x in k for x in ['–§–ù–°', '–†–æ—Å', '–°—É–¥', '–ú–í–î', '–§–°–°–ü'])],
            'üåê –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ OSINT': [k for k in self.mega_databases if k not in ['–§–ù–°', '–†–æ—Å', '–°—É–¥', '–ú–í–î', '–§–°–°–ü']],
            'üìä –ë–∏–∑–Ω–µ—Å –∏ –∫–æ–º–ø–∞–Ω–∏–∏': [k for k in self.mega_databases if any(x in k for x in ['–∫–æ–º–ø–∞–Ω', '–±–∏–∑–Ω–µ—Å', '—Ä–µ–µ—Å—Ç—Ä', '–±–∞–∑–∞'])],
            'üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ': [k for k in self.mega_databases if any(x in k for x in ['–ø–∞—Å–ø–æ—Ä—Ç', '–≤–æ–¥–∏—Ç–µ–ª—å', '–§–ò–û', '–ò–ù–ù'])]
        }
        
        for category, dbs in categories.items():
            print(f"\n{category} ({len(dbs)}):")
            for db in dbs[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  ‚Ä¢ {db}")
            if len(dbs) > 5:
                print(f"  ‚Ä¢ ... –∏ –µ—â–µ {len(dbs)-5}")

def main():
    print("""
    üöÄ MEGA OSINT SEARCH TOOL
    =========================
    üîç 200+ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö | –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ | –ü–æ–ª–Ω—ã–π –ø—Ä–æ–±–∏–≤
    """)
    
    tool = MegaOSINTTool()
    
    while True:
        print("\n" + "="*60)
        print("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")
        print("1. üîé –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –±–∞–∑–∞–º")
        print("2. üá∑üá∫ –¢–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –≥–æ—Å. —Ä–µ–µ—Å—Ç—Ä—ã")
        print("3. üåê –¢–æ–ª—å–∫–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ OSINT –±–∞–∑—ã")
        print("4. üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("5. üóÇÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        print("6. üíæ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("7. üö™ –í—ã—Ö–æ–¥")
        print("="*60)
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-7): ").strip()
        
        if choice in ['1', '2', '3']:
            query = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (–ò–ù–ù, —Ç–µ–ª–µ—Ñ–æ–Ω, email, –§–ò–û –∏ —Ç.–¥.): ").strip()
            if query:
                if choice == '1':
                    tool.comprehensive_search(query)
                elif choice == '2':
                    tool.comprehensive_search(query, 'russian')
                elif choice == '3':
                    tool.comprehensive_search(query, 'international')
        
        elif choice == '4':
            print(f"\nüìä –í–°–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• ({len(tool.mega_databases)}):")
            for i, (name, url) in enumerate(tool.mega_databases.items(), 1):
                print(f"{i:3d}. {name}: {url}")
        
        elif choice == '5':
            tool.show_categories()
        
        elif choice == '6':
            # –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ JSON
            with open('osint_databases_export.json', 'w', encoding='utf-8') as f:
                json.dump(tool.mega_databases, f, indent=2, ensure_ascii=False)
            print("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ osint_databases_export.json")
        
        elif choice == '7':
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
            break
        
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main()
